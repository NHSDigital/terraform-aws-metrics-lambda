- name: "set image_name fact: {{ image.name }}"
  set_fact:
    repository: "{{ ecr_registry }}/{{ image.name }}"
    has_builder: "{{ (image.has_builder | default('no')) == 'yes' }}"
    build_dir: "docker/{{ image.build }}"
    context_cmd: "-f docker/{{ image.build }}/Dockerfile {{ image.context | default('') }}"


- name: "set build_cmd fact {{ image.name }}"
  set_fact:
    build_cmd: "{{ build_dir if image.context is not defined else context_cmd }} {{ image.args | default('') }}"

- name: "build builder - {{ image.name }}"
  include_tasks: build-image-inner.yml
  when: has_builder
  vars:
    cache_tag: "builder"
    build_tag: "builder"
    target: "--target=builder"
    cache_from: "--cache-from {{ repository }}:builder"

- name: "set default tags"
  set_fact:
    cache_tag: "latest"
    build_tag: "{{ docker_build_label }}"

- name: "build container with builder - {{ image.name }}"
  when: has_builder
  include_tasks: build-image-inner.yml
  vars:
    target: ""
    cache_from: "--cache-from {{ repository }}:builder --cache-from {{ repository }}:{{ cache_tag }}"

- name: "build container - {{ image.name }}"
  include_tasks: build-image-inner.yml
  vars:
    target: ""
    cache_from: "--cache-from {{ repository }}:{{ cache_tag }}"

- name: "get digest for {{ repository }}:{{ image.tag }}"
  command: >
    {{ aws_cmd }} ecr describe-images
    --repository-name {{ image.name }}
    --image-ids imageTag={{ build_tag }}
    --query 'imageDetails[0].imageDigest' --output text
  register: image_digest
  failed_when: image_digest.rc !=0 or image_digest.stdout == ''
  ignore_errors: "{{ not docker_push }}"
  changed_when: false

- name: create digest entry
  set_fact:
    digest_info:
      repository: "{{ repository }}"
      tag: "{{ build_tag }}"
      digest: "{{ image_digest.stdout or 'sha256:not-known-until-push' }}"
      do_release_tag: true

- name: record image_digest
  set_fact:
    digests: "{{  digests | combine({image.name: digest_info}) }}"
